# Generated by Django 4.2.13 on 2024-07-03 08:51

from django.conf import settings
import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import phonenumber_field.modelfields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('create_datetime', models.DateTimeField(auto_now_add=True)),
                ('update_datetime', models.DateTimeField(auto_now=True)),
                ('username', models.CharField(max_length=50, unique=True)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('is_active', models.BooleanField(default=True)),
                ('bio', models.TextField(blank=True, null=True)),
                ('location', models.CharField(blank=True, max_length=30, null=True)),
                ('birth_date', models.DateField(blank=True, null=True)),
                ('slug', models.SlugField(unique=True)),
                ('phone', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, region=None)),
                ('can_start_own_organizations', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Config',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slot_duration', models.PositiveIntegerField(help_text='Minimum time for an appointment in minutes, recommended 30.', null=True)),
                ('start_time', models.TimeField(help_text='Time when we start working.', null=True)),
                ('end_time', models.TimeField(help_text='Time when we stop working.', null=True)),
                ('buffer_time', models.FloatField(help_text="Time between now and the first available slot for the current day (doesn't affect tomorrow).", null=True)),
                ('website_name', models.CharField(default='', help_text='Name of your website.', max_length=255)),
                ('app_offered_by_label', models.CharField(default='Offered by', help_text='Label for `Offered by` on the appointment page', max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='Membership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_datetime', models.DateTimeField(auto_now_add=True)),
                ('update_datetime', models.DateTimeField(auto_now=True)),
                ('role', models.CharField(choices=[('member', 'Member'), ('admin', 'Admin')], default='member', max_length=10)),
                ('is_approved', models.BooleanField(default=False)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('invited', 'Invited'), ('accepted', 'Accepted')], default='pending', max_length=10)),
            ],
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_datetime', models.DateTimeField(auto_now_add=True)),
                ('update_datetime', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255)),
                ('asset_name', models.CharField(blank=True, default='Asset', max_length=25, null=True)),
                ('slug', models.SlugField(unique=True)),
                ('exclusive_booking_accross_organization', models.BooleanField(default=False, help_text='An Organization can only accept one booking for a timeslot')),
                ('exclusive_booking_accross_asset', models.BooleanField(default=False, help_text='An Asset can only accept one booking for a timeslot')),
                ('members', models.ManyToManyField(related_name='organizations', through='accounts.Membership', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='membership',
            name='organization',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.organization'),
        ),
        migrations.AddField(
            model_name='membership',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='Asset',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_datetime', models.DateTimeField(auto_now_add=True)),
                ('update_datetime', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255)),
                ('bookable_asset_name', models.CharField(blank=True, default='Bookable Asset', help_text='What do you want to call your bookable assets?', max_length=255, null=True)),
                ('description', models.TextField(blank=True, help_text='Description of what you are booking when booking something from this asset class.', null=True)),
                ('slug', models.SlugField(unique=True)),
                ('default_booking_status', models.CharField(choices=[('pending', 'Pending'), ('rejected', 'Rejected'), ('accepted', 'Accepted'), ('canceled', 'Canceled')], default='pending', help_text='When someone makes a booking this will be the default status.', max_length=10)),
                ('slot_duration', models.PositiveIntegerField(blank=True, default='30', help_text='Minimum time for an appointment in minutes, recommended 30.', null=True)),
                ('buffer_time', models.FloatField(blank=True, help_text='Time between now and the first available slot for the current day.', null=True)),
                ('max_days_ahead', models.IntegerField(blank=True, help_text='How many days ahead do you want to allow bookings?', null=True)),
                ('admin_assigns_booking', models.BooleanField(default=False, help_text='Only admins can assign bookable asset to users')),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Assets', to='accounts.organization')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AlterUniqueTogether(
            name='membership',
            unique_together={('user', 'organization')},
        ),
        migrations.CreateModel(
            name='BookableAsset',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_datetime', models.DateTimeField(auto_now_add=True)),
                ('update_datetime', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255)),
                ('slug', models.SlugField(unique=True)),
                ('calendar_colour', models.CharField(default='#6590D5', max_length=7)),
                ('share_link', models.BooleanField(default=False, help_text='Allow users to share the link to this bookable asset to see bookings')),
                ('asset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bookable_assets', to='accounts.asset')),
            ],
            options={
                'unique_together': {('asset', 'name')},
            },
        ),
        migrations.CreateModel(
            name='AssetBookableHours',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_datetime', models.DateTimeField(auto_now_add=True)),
                ('update_datetime', models.DateTimeField(auto_now=True)),
                ('day_of_week', models.PositiveIntegerField(choices=[(0, 'Sunday'), (1, 'Monday'), (2, 'Tuesday'), (3, 'Wednesday'), (4, 'Thursday'), (5, 'Friday'), (6, 'Saturday')])),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('is_active', models.BooleanField(default=True)),
                ('asset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.asset')),
            ],
            options={
                'unique_together': {('asset', 'day_of_week')},
            },
        ),
    ]
